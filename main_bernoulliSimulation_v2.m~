% bernoulli example

clear

% parameters --------------------------------------------------------------
% run-lengths
l = unique(ceil(logspace(log10(1), log10(100), 20)));
            
% hazard rate (for optimal model)
h = 0.05;



% parameters of beta-distribution prior
a0 = 1;
b0 = 1;


% setup functions ---------------------------------------------------------
% likelihood function
lk  = @bernoulli_likelihood;
% update function for sufficient statistics
U   = @bernoulli_updateSufficientStats;
% compute mean
M   = @bernoulli_mean;


% generate data set -------------------------------------------------------
% make data
[rho_true, d] = bernoulli_generateTestSet(h, T, a0, b0);

% number of timesteps in simulation
T = length(rho_true);


% run reduced model -------------------------------------------------------
% setup transition matrix - comment out one of these to switch between
% original 2013 model and 2017 update
TrMat = makeTransitionMatrix_2013(l, h);
% TrMat = makeTransitionMatrix_2017(l, h);

% initial suff stat val
X = a0/(a0+b0)*l;

% simulate
%   mn is estimated mean 
%   PP is run-length distribution
[mn, PP] = simulate(d, X, l, TrMat, U, lk, M);


% run optimal model
lk_opt  = @bernoulli_optimalModel_likelihood;
U_opt   = @bernoulli_optimalModel_updateSufficientStats;
M_opt   = @bernoulli_optimalModel_mean;
H_opt   = @(T) hazard_constant(T,h);

% initial suff stat val
xPrior = [2 1];

% simulate optimal model
[mn_opt, PP_opt] = simulate_optimalModel(d, xPrior, H_opt, U_opt, lk_opt, M);
            

% plot --------------------------------------------------------------------
figure(1); clf;
ax(1) = subplot(3,1,1); hold on;
imagesc(d)
title('data')
set(gca, 'ytick', [])

ax(2) = subplot(3,1,2); hold on;
plot(rho_true)
plot(mn_opt)
plot(mn)

title('generative Bernoulli rate')

ax(3) = subplot(3,1,3); hold on;
imagesc(PP')
ylim([0.5 length(l)+0.5])
set(ax, 'xlim', [0 T]+0.5)
title('run-length distribution')
xlabel('time step')

set(ax, 'fontsize', 14)




